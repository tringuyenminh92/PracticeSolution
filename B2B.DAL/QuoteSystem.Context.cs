//------------------------------------------------------------------------------
// <auto-generated>
//    This code was generated from a template.
//
//    Manual changes to this file may cause unexpected behavior in your application.
//    Manual changes to this file will be overwritten if the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace B2B.DAL
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Objects;
    using System.Data.Objects.DataClasses;
    using System.Linq;
    
    public partial class QuoteSystemEntities : DbContext
    {
        public QuoteSystemEntities()
            : base("name=QuoteSystemEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public DbSet<Country> Countries { get; set; }
        public DbSet<State> States { get; set; }
        public DbSet<T_Accumulators> T_Accumulators { get; set; }
        public DbSet<T_ANSIPiping> T_ANSIPiping { get; set; }
        public DbSet<T_ANSIPiping_old> T_ANSIPiping_old { get; set; }
        public DbSet<T_ANSIPiping_Temp> T_ANSIPiping_Temp { get; set; }
        public DbSet<T_AppRole> T_AppRole { get; set; }
        public DbSet<T_BillToCustomerDetails> T_BillToCustomerDetails { get; set; }
        public DbSet<T_Conduit> T_Conduit { get; set; }
        public DbSet<T_Configuration> T_Configuration { get; set; }
        public DbSet<T_DebugSP> T_DebugSP { get; set; }
        public DbSet<T_DocumentLink> T_DocumentLink { get; set; }
        public DbSet<T_DocumentLinkCategory> T_DocumentLinkCategory { get; set; }
        public DbSet<T_Fields> T_Fields { get; set; }
        public DbSet<T_Fields_Value> T_Fields_Value { get; set; }
        public DbSet<T_Flange_type> T_Flange_type { get; set; }
        public DbSet<T_FlangePad> T_FlangePad { get; set; }
        public DbSet<T_FlangePattern> T_FlangePattern { get; set; }
        public DbSet<T_Flanges> T_Flanges { get; set; }
        public DbSet<T_Labor> T_Labor { get; set; }
        public DbSet<T_LABOR_DATA> T_LABOR_DATA { get; set; }
        public DbSet<T_labor_variables> T_labor_variables { get; set; }
        public DbSet<T_LaborCostFactors> T_LaborCostFactors { get; set; }
        public DbSet<T_LaborCostFactors_ShippableAssembly> T_LaborCostFactors_ShippableAssembly { get; set; }
        public DbSet<T_MotorHorsePower> T_MotorHorsePower { get; set; }
        public DbSet<T_MotorManufacturer> T_MotorManufacturer { get; set; }
        public DbSet<T_MotorRPM> T_MotorRPM { get; set; }
        public DbSet<T_MotorVoltage> T_MotorVoltage { get; set; }
        public DbSet<T_newpart> T_newpart { get; set; }
        public DbSet<T_Piping_Clamp> T_Piping_Clamp { get; set; }
        public DbSet<T_Piping_Fitting> T_Piping_Fitting { get; set; }
        public DbSet<T_Piping_Flang> T_Piping_Flang { get; set; }
        public DbSet<T_Piping_Hour_Details> T_Piping_Hour_Details { get; set; }
        public DbSet<T_Piping_Kick> T_Piping_Kick { get; set; }
        public DbSet<T_Piping_NPT_PipeConn> T_Piping_NPT_PipeConn { get; set; }
        public DbSet<T_Piping_PipeConnect> T_Piping_PipeConnect { get; set; }
        public DbSet<T_Piping_SchemParts> T_Piping_SchemParts { get; set; }
        public DbSet<T_Piping_ThrededFitting> T_Piping_ThrededFitting { get; set; }
        public DbSet<T_Piping_TubeConnect> T_Piping_TubeConnect { get; set; }
        public DbSet<T_PipingComponent_Values> T_PipingComponent_Values { get; set; }
        public DbSet<T_PipingComponents> T_PipingComponents { get; set; }
        public DbSet<T_PipingLabor_Data> T_PipingLabor_Data { get; set; }
        public DbSet<T_PipingLaborConfiguration> T_PipingLaborConfiguration { get; set; }
        public DbSet<T_PipingLaborForCSSS> T_PipingLaborForCSSS { get; set; }
        public DbSet<T_PipingLaborPaintRequirement> T_PipingLaborPaintRequirement { get; set; }
        public DbSet<T_PipingMaterial> T_PipingMaterial { get; set; }
        public DbSet<T_PipingSchedule> T_PipingSchedule { get; set; }
        public DbSet<T_PipingSchemMapping> T_PipingSchemMapping { get; set; }
        public DbSet<T_PipingSize> T_PipingSize { get; set; }
        public DbSet<T_Product> T_Product { get; set; }
        public DbSet<T_qts_All_SAP_Motors> T_qts_All_SAP_Motors { get; set; }
        public DbSet<T_Quote_Details> T_Quote_Details { get; set; }
        public DbSet<T_Quote_Parts> T_Quote_Parts { get; set; }
        public DbSet<T_Quote_Sections> T_Quote_Sections { get; set; }
        public DbSet<T_Quote_Sub> T_Quote_Sub { get; set; }
        public DbSet<T_Quotes> T_Quotes { get; set; }
        public DbSet<T_ResInfo> T_ResInfo { get; set; }
        public DbSet<T_Roles> T_Roles { get; set; }
        public DbSet<T_SalesGroup> T_SalesGroup { get; set; }
        public DbSet<T_SalesOffice> T_SalesOffice { get; set; }
        public DbSet<T_SAPParts> T_SAPParts { get; set; }
        public DbSet<T_ShippableAssembly> T_ShippableAssembly { get; set; }
        public DbSet<T_status> T_status { get; set; }
        public DbSet<T_status_old> T_status_old { get; set; }
        public DbSet<T_Sub_Category> T_Sub_Category { get; set; }
        public DbSet<T_UserRoles> T_UserRoles { get; set; }
        public DbSet<T_Users> T_Users { get; set; }
        public DbSet<T_WT_ChangeRequest> T_WT_ChangeRequest { get; set; }
        public DbSet<T_WT_ChangeRequestTag> T_WT_ChangeRequestTag { get; set; }
        public DbSet<T_WT_HLD> T_WT_HLD { get; set; }
        public DbSet<T_WT_IT> T_WT_IT { get; set; }
        public DbSet<T_WT_LLD> T_WT_LLD { get; set; }
        public DbSet<T_WT_Module> T_WT_Module { get; set; }
        public DbSet<T_WT_Profile> T_WT_Profile { get; set; }
        public DbSet<T_WT_Project> T_WT_Project { get; set; }
        public DbSet<T_WT_User> T_WT_User { get; set; }
        public DbSet<T_WT_UserProfile> T_WT_UserProfile { get; set; }
        public DbSet<T_Contact_Information> T_Contact_Information { get; set; }
        public DbSet<T_Custom_Customers> T_Custom_Customers { get; set; }
        public DbSet<T_Flangetype> T_Flangetype { get; set; }
        public DbSet<T_MaterialCostFactors> T_MaterialCostFactors { get; set; }
        public DbSet<T_Piping_PaintDetail> T_Piping_PaintDetail { get; set; }
        public DbSet<T_PipingType> T_PipingType { get; set; }
        public DbSet<T_qts_tblPUAdescr> T_qts_tblPUAdescr { get; set; }
        public DbSet<T_sap_customer> T_sap_customer { get; set; }
        public DbSet<T_SAPCustomersImport_Temp> T_SAPCustomersImport_Temp { get; set; }
        public DbSet<T_sapmats> T_sapmats { get; set; }
        public DbSet<T_SAPPartsImport_Temp> T_SAPPartsImport_Temp { get; set; }
    
        public virtual ObjectResult<Nullable<int>> SP_AddUpdateDeleteConstant(ObjectParameter errorCode, Nullable<int> operationFlag, Nullable<int> id, Nullable<int> type, string category, string name, Nullable<double> value, string unit, string description, string userOperating)
        {
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("operationFlag", operationFlag) :
                new ObjectParameter("operationFlag", typeof(int));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var valueParameter = value.HasValue ?
                new ObjectParameter("value", value) :
                new ObjectParameter("value", typeof(double));
    
            var unitParameter = unit != null ?
                new ObjectParameter("unit", unit) :
                new ObjectParameter("unit", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var userOperatingParameter = userOperating != null ?
                new ObjectParameter("userOperating", userOperating) :
                new ObjectParameter("userOperating", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_AddUpdateDeleteConstant", errorCode, operationFlagParameter, idParameter, typeParameter, categoryParameter, nameParameter, valueParameter, unitParameter, descriptionParameter, userOperatingParameter);
        }
    
        public virtual int SP_AddUpdateDeleteQuotePart(ObjectParameter errorCode, ObjectParameter quotePartId, string operatingUser, Nullable<int> operationFlag, string quoteNumber, Nullable<int> sectionNumber, string isSubAssembly, Nullable<int> lI, string techPosition, string partNumber, string description, Nullable<decimal> cost, Nullable<int> quantity, Nullable<decimal> materialOverhead, Nullable<decimal> netCost, Nullable<double> partMarkup, string revision, Nullable<double> pipingWelding, Nullable<double> pipingAssembly, Nullable<int> shippableAssemblyId)
        {
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var isSubAssemblyParameter = isSubAssembly != null ?
                new ObjectParameter("IsSubAssembly", isSubAssembly) :
                new ObjectParameter("IsSubAssembly", typeof(string));
    
            var lIParameter = lI.HasValue ?
                new ObjectParameter("LI", lI) :
                new ObjectParameter("LI", typeof(int));
    
            var techPositionParameter = techPosition != null ?
                new ObjectParameter("TechPosition", techPosition) :
                new ObjectParameter("TechPosition", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var materialOverheadParameter = materialOverhead.HasValue ?
                new ObjectParameter("MaterialOverhead", materialOverhead) :
                new ObjectParameter("MaterialOverhead", typeof(decimal));
    
            var netCostParameter = netCost.HasValue ?
                new ObjectParameter("NetCost", netCost) :
                new ObjectParameter("NetCost", typeof(decimal));
    
            var partMarkupParameter = partMarkup.HasValue ?
                new ObjectParameter("PartMarkup", partMarkup) :
                new ObjectParameter("PartMarkup", typeof(double));
    
            var revisionParameter = revision != null ?
                new ObjectParameter("Revision", revision) :
                new ObjectParameter("Revision", typeof(string));
    
            var pipingWeldingParameter = pipingWelding.HasValue ?
                new ObjectParameter("PipingWelding", pipingWelding) :
                new ObjectParameter("PipingWelding", typeof(double));
    
            var pipingAssemblyParameter = pipingAssembly.HasValue ?
                new ObjectParameter("PipingAssembly", pipingAssembly) :
                new ObjectParameter("PipingAssembly", typeof(double));
    
            var shippableAssemblyIdParameter = shippableAssemblyId.HasValue ?
                new ObjectParameter("ShippableAssemblyId", shippableAssemblyId) :
                new ObjectParameter("ShippableAssemblyId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddUpdateDeleteQuotePart", errorCode, quotePartId, operatingUserParameter, operationFlagParameter, quoteNumberParameter, sectionNumberParameter, isSubAssemblyParameter, lIParameter, techPositionParameter, partNumberParameter, descriptionParameter, costParameter, quantityParameter, materialOverheadParameter, netCostParameter, partMarkupParameter, revisionParameter, pipingWeldingParameter, pipingAssemblyParameter, shippableAssemblyIdParameter);
        }
    
        public virtual int SP_AddUpdateDeleteQuoteSubAssemblyPart(ObjectParameter errorCode, ObjectParameter quotePartId, string operatingUser, Nullable<int> operationFlag, string quoteNumber, Nullable<int> sectionNumber, Nullable<int> subAssemblyParent, Nullable<int> lI, string techPosition, string partNumber, string description, Nullable<decimal> cost, Nullable<int> quantity, Nullable<decimal> netCost, Nullable<double> partMarkup, string revision, Nullable<double> pipingWelding, Nullable<double> pipingAssembly)
        {
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subAssemblyParentParameter = subAssemblyParent.HasValue ?
                new ObjectParameter("SubAssemblyParent", subAssemblyParent) :
                new ObjectParameter("SubAssemblyParent", typeof(int));
    
            var lIParameter = lI.HasValue ?
                new ObjectParameter("LI", lI) :
                new ObjectParameter("LI", typeof(int));
    
            var techPositionParameter = techPosition != null ?
                new ObjectParameter("TechPosition", techPosition) :
                new ObjectParameter("TechPosition", typeof(string));
    
            var partNumberParameter = partNumber != null ?
                new ObjectParameter("PartNumber", partNumber) :
                new ObjectParameter("PartNumber", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var costParameter = cost.HasValue ?
                new ObjectParameter("Cost", cost) :
                new ObjectParameter("Cost", typeof(decimal));
    
            var quantityParameter = quantity.HasValue ?
                new ObjectParameter("Quantity", quantity) :
                new ObjectParameter("Quantity", typeof(int));
    
            var netCostParameter = netCost.HasValue ?
                new ObjectParameter("NetCost", netCost) :
                new ObjectParameter("NetCost", typeof(decimal));
    
            var partMarkupParameter = partMarkup.HasValue ?
                new ObjectParameter("PartMarkup", partMarkup) :
                new ObjectParameter("PartMarkup", typeof(double));
    
            var revisionParameter = revision != null ?
                new ObjectParameter("Revision", revision) :
                new ObjectParameter("Revision", typeof(string));
    
            var pipingWeldingParameter = pipingWelding.HasValue ?
                new ObjectParameter("PipingWelding", pipingWelding) :
                new ObjectParameter("PipingWelding", typeof(double));
    
            var pipingAssemblyParameter = pipingAssembly.HasValue ?
                new ObjectParameter("PipingAssembly", pipingAssembly) :
                new ObjectParameter("PipingAssembly", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AddUpdateDeleteQuoteSubAssemblyPart", errorCode, quotePartId, operatingUserParameter, operationFlagParameter, quoteNumberParameter, sectionNumberParameter, subAssemblyParentParameter, lIParameter, techPositionParameter, partNumberParameter, descriptionParameter, costParameter, quantityParameter, netCostParameter, partMarkupParameter, revisionParameter, pipingWeldingParameter, pipingAssemblyParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_AddUpdateDeleteUser(ObjectParameter errorCode, ObjectParameter userId, string operatingUser, Nullable<int> operationFlag, string domain, string nTID, string firstName, string lastName, string userName, string department, string email, string phone, Nullable<int> roleId)
        {
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            var domainParameter = domain != null ?
                new ObjectParameter("Domain", domain) :
                new ObjectParameter("Domain", typeof(string));
    
            var nTIDParameter = nTID != null ?
                new ObjectParameter("NTID", nTID) :
                new ObjectParameter("NTID", typeof(string));
    
            var firstNameParameter = firstName != null ?
                new ObjectParameter("FirstName", firstName) :
                new ObjectParameter("FirstName", typeof(string));
    
            var lastNameParameter = lastName != null ?
                new ObjectParameter("LastName", lastName) :
                new ObjectParameter("LastName", typeof(string));
    
            var userNameParameter = userName != null ?
                new ObjectParameter("UserName", userName) :
                new ObjectParameter("UserName", typeof(string));
    
            var departmentParameter = department != null ?
                new ObjectParameter("Department", department) :
                new ObjectParameter("Department", typeof(string));
    
            var emailParameter = email != null ?
                new ObjectParameter("Email", email) :
                new ObjectParameter("Email", typeof(string));
    
            var phoneParameter = phone != null ?
                new ObjectParameter("Phone", phone) :
                new ObjectParameter("Phone", typeof(string));
    
            var roleIdParameter = roleId.HasValue ?
                new ObjectParameter("RoleId", roleId) :
                new ObjectParameter("RoleId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_AddUpdateDeleteUser", errorCode, userId, operatingUserParameter, operationFlagParameter, domainParameter, nTIDParameter, firstNameParameter, lastNameParameter, userNameParameter, departmentParameter, emailParameter, phoneParameter, roleIdParameter);
        }
    
        public virtual int SP_AutoReCostingForSummary(string quoteNumber, Nullable<int> sectionNumber, string operatingUser)
        {
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AutoReCostingForSummary", quoteNumberParameter, sectionNumberParameter, operatingUserParameter);
        }
    
        public virtual int SP_AutoUpdateOrderSubAssembly()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AutoUpdateOrderSubAssembly");
        }
    
        public virtual int SP_AutoUpdateOrderSubAssemblySectionLevel(Nullable<int> quoteId, Nullable<int> sectionId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_AutoUpdateOrderSubAssemblySectionLevel", quoteIdParameter, sectionIdParameter);
        }
    
        public virtual int SP_ClearQuoteData(Nullable<long> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("quoteId", quoteId) :
                new ObjectParameter("quoteId", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ClearQuoteData", quoteIdParameter);
        }
    
        public virtual int SP_ComputeAndUpdateSectionWisePartCost(string quoteNumber, Nullable<int> sectionNumber, string operatingUser)
        {
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ComputeAndUpdateSectionWisePartCost", quoteNumberParameter, sectionNumberParameter, operatingUserParameter);
        }
    
        public virtual int SP_ComputeLaborHours(Nullable<int> quoteNumber, Nullable<int> sectionNumber, Nullable<int> subassemblyID, string operatingUser)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subassemblyIDParameter = subassemblyID.HasValue ?
                new ObjectParameter("SubassemblyID", subassemblyID) :
                new ObjectParameter("SubassemblyID", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ComputeLaborHours", quoteNumberParameter, sectionNumberParameter, subassemblyIDParameter, operatingUserParameter);
        }
    
        public virtual int SP_ComputePipingLaborHours(Nullable<int> quoteNumber, Nullable<int> sectionNumber, Nullable<int> subassemblyID, string units, string conduitType, string component, string method, Nullable<double> size, string paint, Nullable<int> user_Qty, string operatingUser)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subassemblyIDParameter = subassemblyID.HasValue ?
                new ObjectParameter("SubassemblyID", subassemblyID) :
                new ObjectParameter("SubassemblyID", typeof(int));
    
            var unitsParameter = units != null ?
                new ObjectParameter("Units", units) :
                new ObjectParameter("Units", typeof(string));
    
            var conduitTypeParameter = conduitType != null ?
                new ObjectParameter("ConduitType", conduitType) :
                new ObjectParameter("ConduitType", typeof(string));
    
            var componentParameter = component != null ?
                new ObjectParameter("Component", component) :
                new ObjectParameter("Component", typeof(string));
    
            var methodParameter = method != null ?
                new ObjectParameter("Method", method) :
                new ObjectParameter("Method", typeof(string));
    
            var sizeParameter = size.HasValue ?
                new ObjectParameter("Size", size) :
                new ObjectParameter("Size", typeof(double));
    
            var paintParameter = paint != null ?
                new ObjectParameter("Paint", paint) :
                new ObjectParameter("Paint", typeof(string));
    
            var user_QtyParameter = user_Qty.HasValue ?
                new ObjectParameter("User_Qty", user_Qty) :
                new ObjectParameter("User_Qty", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ComputePipingLaborHours", quoteNumberParameter, sectionNumberParameter, subassemblyIDParameter, unitsParameter, conduitTypeParameter, componentParameter, methodParameter, sizeParameter, paintParameter, user_QtyParameter, operatingUserParameter);
        }
    
        public virtual int SP_CopySection(Nullable<int> quoteID, string datafromExistingSection, string datatoExistingSection, string datatoNewSection, Nullable<int> operationFlag)
        {
            var quoteIDParameter = quoteID.HasValue ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(int));
    
            var datafromExistingSectionParameter = datafromExistingSection != null ?
                new ObjectParameter("DatafromExistingSection", datafromExistingSection) :
                new ObjectParameter("DatafromExistingSection", typeof(string));
    
            var datatoExistingSectionParameter = datatoExistingSection != null ?
                new ObjectParameter("DatatoExistingSection", datatoExistingSection) :
                new ObjectParameter("DatatoExistingSection", typeof(string));
    
            var datatoNewSectionParameter = datatoNewSection != null ?
                new ObjectParameter("DatatoNewSection", datatoNewSection) :
                new ObjectParameter("DatatoNewSection", typeof(string));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CopySection", quoteIDParameter, datafromExistingSectionParameter, datatoExistingSectionParameter, datatoNewSectionParameter, operationFlagParameter);
        }
    
        public virtual int SP_CopySection_bkp(string quoteNumber, string datafromExistingSection, string datatoExistingSection, string datatoNewSection)
        {
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var datafromExistingSectionParameter = datafromExistingSection != null ?
                new ObjectParameter("DatafromExistingSection", datafromExistingSection) :
                new ObjectParameter("DatafromExistingSection", typeof(string));
    
            var datatoExistingSectionParameter = datatoExistingSection != null ?
                new ObjectParameter("DatatoExistingSection", datatoExistingSection) :
                new ObjectParameter("DatatoExistingSection", typeof(string));
    
            var datatoNewSectionParameter = datatoNewSection != null ?
                new ObjectParameter("DatatoNewSection", datatoNewSection) :
                new ObjectParameter("DatatoNewSection", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CopySection_bkp", quoteNumberParameter, datafromExistingSectionParameter, datatoExistingSectionParameter, datatoNewSectionParameter);
        }
    
        public virtual int SP_CopySection_Bkp_25th_April(Nullable<int> quoteID, string datafromExistingSection, string datatoExistingSection, string datatoNewSection, Nullable<int> operationFlag)
        {
            var quoteIDParameter = quoteID.HasValue ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(int));
    
            var datafromExistingSectionParameter = datafromExistingSection != null ?
                new ObjectParameter("DatafromExistingSection", datafromExistingSection) :
                new ObjectParameter("DatafromExistingSection", typeof(string));
    
            var datatoExistingSectionParameter = datatoExistingSection != null ?
                new ObjectParameter("DatatoExistingSection", datatoExistingSection) :
                new ObjectParameter("DatatoExistingSection", typeof(string));
    
            var datatoNewSectionParameter = datatoNewSection != null ?
                new ObjectParameter("DatatoNewSection", datatoNewSection) :
                new ObjectParameter("DatatoNewSection", typeof(string));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CopySection_Bkp_25th_April", quoteIDParameter, datafromExistingSectionParameter, datatoExistingSectionParameter, datatoNewSectionParameter, operationFlagParameter);
        }
    
        public virtual int SP_CopySection_Temp29Apr2014(Nullable<int> quoteID, string datafromExistingSection, string datatoExistingSection, string datatoNewSection, Nullable<int> operationFlag)
        {
            var quoteIDParameter = quoteID.HasValue ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(int));
    
            var datafromExistingSectionParameter = datafromExistingSection != null ?
                new ObjectParameter("DatafromExistingSection", datafromExistingSection) :
                new ObjectParameter("DatafromExistingSection", typeof(string));
    
            var datatoExistingSectionParameter = datatoExistingSection != null ?
                new ObjectParameter("DatatoExistingSection", datatoExistingSection) :
                new ObjectParameter("DatatoExistingSection", typeof(string));
    
            var datatoNewSectionParameter = datatoNewSection != null ?
                new ObjectParameter("DatatoNewSection", datatoNewSection) :
                new ObjectParameter("DatatoNewSection", typeof(string));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CopySection_Temp29Apr2014", quoteIDParameter, datafromExistingSectionParameter, datatoExistingSectionParameter, datatoNewSectionParameter, operationFlagParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_CopySectionDetails(Nullable<int> copiedQuoteNumber, Nullable<int> auto)
        {
            var copiedQuoteNumberParameter = copiedQuoteNumber.HasValue ?
                new ObjectParameter("CopiedQuoteNumber", copiedQuoteNumber) :
                new ObjectParameter("CopiedQuoteNumber", typeof(int));
    
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_CopySectionDetails", copiedQuoteNumberParameter, autoParameter);
        }
    
        public virtual int SP_CreateLaborEntriesForNewSection(Nullable<int> quoteNumber, Nullable<int> sectionNumber, string operatingUser)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateLaborEntriesForNewSection", quoteNumberParameter, sectionNumberParameter, operatingUserParameter);
        }
    
        public virtual int SP_CreateLaborEntriesForNewSubassembly(Nullable<int> quoteNumber, Nullable<int> sectionNumber, Nullable<int> subassemblyID, string operatingUser)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subassemblyIDParameter = subassemblyID.HasValue ?
                new ObjectParameter("SubassemblyID", subassemblyID) :
                new ObjectParameter("SubassemblyID", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateLaborEntriesForNewSubassembly", quoteNumberParameter, sectionNumberParameter, subassemblyIDParameter, operatingUserParameter);
        }
    
        public virtual int SP_CreateQuote(Nullable<int> auto, string quote_number, string quoter, Nullable<System.DateTime> quote_expectedorder_date, Nullable<System.DateTime> quote_rec_date, Nullable<System.DateTime> quote_due_date, Nullable<System.DateTime> quote_issued_date, Nullable<int> sales_office, Nullable<int> sales_group, string cust_name, string cust_street, string cust_city, string cust_zip, string cust_state, string cust_country, string cust_sap_number, string contact_salutation, string contact_fname, string contact_lname, string contact_telbus, string contact_telmobile, string contact_telfax, string contact_email, string description, Nullable<double> est_price, string reason, string reasonDetails, string orderStatus)
        {
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(int));
    
            var quote_numberParameter = quote_number != null ?
                new ObjectParameter("Quote_number", quote_number) :
                new ObjectParameter("Quote_number", typeof(string));
    
            var quoterParameter = quoter != null ?
                new ObjectParameter("quoter", quoter) :
                new ObjectParameter("quoter", typeof(string));
    
            var quote_expectedorder_dateParameter = quote_expectedorder_date.HasValue ?
                new ObjectParameter("quote_expectedorder_date", quote_expectedorder_date) :
                new ObjectParameter("quote_expectedorder_date", typeof(System.DateTime));
    
            var quote_rec_dateParameter = quote_rec_date.HasValue ?
                new ObjectParameter("quote_rec_date", quote_rec_date) :
                new ObjectParameter("quote_rec_date", typeof(System.DateTime));
    
            var quote_due_dateParameter = quote_due_date.HasValue ?
                new ObjectParameter("quote_due_date", quote_due_date) :
                new ObjectParameter("quote_due_date", typeof(System.DateTime));
    
            var quote_issued_dateParameter = quote_issued_date.HasValue ?
                new ObjectParameter("quote_issued_date", quote_issued_date) :
                new ObjectParameter("quote_issued_date", typeof(System.DateTime));
    
            var sales_officeParameter = sales_office.HasValue ?
                new ObjectParameter("sales_office", sales_office) :
                new ObjectParameter("sales_office", typeof(int));
    
            var sales_groupParameter = sales_group.HasValue ?
                new ObjectParameter("sales_group", sales_group) :
                new ObjectParameter("sales_group", typeof(int));
    
            var cust_nameParameter = cust_name != null ?
                new ObjectParameter("cust_name", cust_name) :
                new ObjectParameter("cust_name", typeof(string));
    
            var cust_streetParameter = cust_street != null ?
                new ObjectParameter("cust_street", cust_street) :
                new ObjectParameter("cust_street", typeof(string));
    
            var cust_cityParameter = cust_city != null ?
                new ObjectParameter("cust_city", cust_city) :
                new ObjectParameter("cust_city", typeof(string));
    
            var cust_zipParameter = cust_zip != null ?
                new ObjectParameter("cust_zip", cust_zip) :
                new ObjectParameter("cust_zip", typeof(string));
    
            var cust_stateParameter = cust_state != null ?
                new ObjectParameter("cust_state", cust_state) :
                new ObjectParameter("cust_state", typeof(string));
    
            var cust_countryParameter = cust_country != null ?
                new ObjectParameter("cust_country", cust_country) :
                new ObjectParameter("cust_country", typeof(string));
    
            var cust_sap_numberParameter = cust_sap_number != null ?
                new ObjectParameter("cust_sap_number", cust_sap_number) :
                new ObjectParameter("cust_sap_number", typeof(string));
    
            var contact_salutationParameter = contact_salutation != null ?
                new ObjectParameter("contact_salutation", contact_salutation) :
                new ObjectParameter("contact_salutation", typeof(string));
    
            var contact_fnameParameter = contact_fname != null ?
                new ObjectParameter("contact_fname", contact_fname) :
                new ObjectParameter("contact_fname", typeof(string));
    
            var contact_lnameParameter = contact_lname != null ?
                new ObjectParameter("contact_lname", contact_lname) :
                new ObjectParameter("contact_lname", typeof(string));
    
            var contact_telbusParameter = contact_telbus != null ?
                new ObjectParameter("contact_telbus", contact_telbus) :
                new ObjectParameter("contact_telbus", typeof(string));
    
            var contact_telmobileParameter = contact_telmobile != null ?
                new ObjectParameter("contact_telmobile", contact_telmobile) :
                new ObjectParameter("contact_telmobile", typeof(string));
    
            var contact_telfaxParameter = contact_telfax != null ?
                new ObjectParameter("contact_telfax", contact_telfax) :
                new ObjectParameter("contact_telfax", typeof(string));
    
            var contact_emailParameter = contact_email != null ?
                new ObjectParameter("contact_email", contact_email) :
                new ObjectParameter("contact_email", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var est_priceParameter = est_price.HasValue ?
                new ObjectParameter("est_price", est_price) :
                new ObjectParameter("est_price", typeof(double));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var reasonDetailsParameter = reasonDetails != null ?
                new ObjectParameter("ReasonDetails", reasonDetails) :
                new ObjectParameter("ReasonDetails", typeof(string));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateQuote", autoParameter, quote_numberParameter, quoterParameter, quote_expectedorder_dateParameter, quote_rec_dateParameter, quote_due_dateParameter, quote_issued_dateParameter, sales_officeParameter, sales_groupParameter, cust_nameParameter, cust_streetParameter, cust_cityParameter, cust_zipParameter, cust_stateParameter, cust_countryParameter, cust_sap_numberParameter, contact_salutationParameter, contact_fnameParameter, contact_lnameParameter, contact_telbusParameter, contact_telmobileParameter, contact_telfaxParameter, contact_emailParameter, descriptionParameter, est_priceParameter, reasonParameter, reasonDetailsParameter, orderStatusParameter);
        }
    
        public virtual int SP_CreateSection(Nullable<int> quoteNumber, string sectiontype, Nullable<int> sectionNumber, string sectionDescription, Nullable<double> defaultPartMargin, Nullable<int> qty, string operatingUser, Nullable<int> sectionOrder)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectiontypeParameter = sectiontype != null ?
                new ObjectParameter("Sectiontype", sectiontype) :
                new ObjectParameter("Sectiontype", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var sectionDescriptionParameter = sectionDescription != null ?
                new ObjectParameter("SectionDescription", sectionDescription) :
                new ObjectParameter("SectionDescription", typeof(string));
    
            var defaultPartMarginParameter = defaultPartMargin.HasValue ?
                new ObjectParameter("DefaultPartMargin", defaultPartMargin) :
                new ObjectParameter("DefaultPartMargin", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var sectionOrderParameter = sectionOrder.HasValue ?
                new ObjectParameter("SectionOrder", sectionOrder) :
                new ObjectParameter("SectionOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_CreateSection", quoteNumberParameter, sectiontypeParameter, sectionNumberParameter, sectionDescriptionParameter, defaultPartMarginParameter, qtyParameter, operatingUserParameter, sectionOrderParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_CreateUpdateQuote(Nullable<int> operationFlag, Nullable<int> copiedQuoteNumber, string quote_number, Nullable<System.DateTime> quote_expectedorder_date, Nullable<System.DateTime> quote_rec_date, Nullable<System.DateTime> quote_due_date, Nullable<System.DateTime> quote_issued_date, Nullable<int> sales_office, Nullable<int> sales_group, string cust_name, string cust_street, string cust_city, string cust_zip, string cust_state, string cust_country, string cust_sap_number, string contact_salutation, string contact_fname, string contact_lname, string contact_telbus, string contact_telmobile, string contact_telfax, string contact_email, string description, Nullable<double> est_price, string createdBy, string modifiedBy, Nullable<int> lineItemIncrement, Nullable<int> techPositionIncrement, string status, string reason, string reasonDetails, string orderStatus, Nullable<short> quote_Revision, string application_Engg, string sale_Engineer, Nullable<int> distributorId, Nullable<int> salesOrderNumber, Nullable<int> customerType, Nullable<int> probabilityPO, Nullable<int> probabilityEOD, string oEM_cust_city, string oEM_cust_country, string oEM_cust_name, string oEM_cust_state, string oEM_cust_street, string oEM_cust_zip)
        {
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            var copiedQuoteNumberParameter = copiedQuoteNumber.HasValue ?
                new ObjectParameter("CopiedQuoteNumber", copiedQuoteNumber) :
                new ObjectParameter("CopiedQuoteNumber", typeof(int));
    
            var quote_numberParameter = quote_number != null ?
                new ObjectParameter("Quote_number", quote_number) :
                new ObjectParameter("Quote_number", typeof(string));
    
            var quote_expectedorder_dateParameter = quote_expectedorder_date.HasValue ?
                new ObjectParameter("quote_expectedorder_date", quote_expectedorder_date) :
                new ObjectParameter("quote_expectedorder_date", typeof(System.DateTime));
    
            var quote_rec_dateParameter = quote_rec_date.HasValue ?
                new ObjectParameter("quote_rec_date", quote_rec_date) :
                new ObjectParameter("quote_rec_date", typeof(System.DateTime));
    
            var quote_due_dateParameter = quote_due_date.HasValue ?
                new ObjectParameter("quote_due_date", quote_due_date) :
                new ObjectParameter("quote_due_date", typeof(System.DateTime));
    
            var quote_issued_dateParameter = quote_issued_date.HasValue ?
                new ObjectParameter("quote_issued_date", quote_issued_date) :
                new ObjectParameter("quote_issued_date", typeof(System.DateTime));
    
            var sales_officeParameter = sales_office.HasValue ?
                new ObjectParameter("sales_office", sales_office) :
                new ObjectParameter("sales_office", typeof(int));
    
            var sales_groupParameter = sales_group.HasValue ?
                new ObjectParameter("sales_group", sales_group) :
                new ObjectParameter("sales_group", typeof(int));
    
            var cust_nameParameter = cust_name != null ?
                new ObjectParameter("cust_name", cust_name) :
                new ObjectParameter("cust_name", typeof(string));
    
            var cust_streetParameter = cust_street != null ?
                new ObjectParameter("cust_street", cust_street) :
                new ObjectParameter("cust_street", typeof(string));
    
            var cust_cityParameter = cust_city != null ?
                new ObjectParameter("cust_city", cust_city) :
                new ObjectParameter("cust_city", typeof(string));
    
            var cust_zipParameter = cust_zip != null ?
                new ObjectParameter("cust_zip", cust_zip) :
                new ObjectParameter("cust_zip", typeof(string));
    
            var cust_stateParameter = cust_state != null ?
                new ObjectParameter("cust_state", cust_state) :
                new ObjectParameter("cust_state", typeof(string));
    
            var cust_countryParameter = cust_country != null ?
                new ObjectParameter("cust_country", cust_country) :
                new ObjectParameter("cust_country", typeof(string));
    
            var cust_sap_numberParameter = cust_sap_number != null ?
                new ObjectParameter("cust_sap_number", cust_sap_number) :
                new ObjectParameter("cust_sap_number", typeof(string));
    
            var contact_salutationParameter = contact_salutation != null ?
                new ObjectParameter("contact_salutation", contact_salutation) :
                new ObjectParameter("contact_salutation", typeof(string));
    
            var contact_fnameParameter = contact_fname != null ?
                new ObjectParameter("contact_fname", contact_fname) :
                new ObjectParameter("contact_fname", typeof(string));
    
            var contact_lnameParameter = contact_lname != null ?
                new ObjectParameter("contact_lname", contact_lname) :
                new ObjectParameter("contact_lname", typeof(string));
    
            var contact_telbusParameter = contact_telbus != null ?
                new ObjectParameter("contact_telbus", contact_telbus) :
                new ObjectParameter("contact_telbus", typeof(string));
    
            var contact_telmobileParameter = contact_telmobile != null ?
                new ObjectParameter("contact_telmobile", contact_telmobile) :
                new ObjectParameter("contact_telmobile", typeof(string));
    
            var contact_telfaxParameter = contact_telfax != null ?
                new ObjectParameter("contact_telfax", contact_telfax) :
                new ObjectParameter("contact_telfax", typeof(string));
    
            var contact_emailParameter = contact_email != null ?
                new ObjectParameter("contact_email", contact_email) :
                new ObjectParameter("contact_email", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var est_priceParameter = est_price.HasValue ?
                new ObjectParameter("est_price", est_price) :
                new ObjectParameter("est_price", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var lineItemIncrementParameter = lineItemIncrement.HasValue ?
                new ObjectParameter("LineItemIncrement", lineItemIncrement) :
                new ObjectParameter("LineItemIncrement", typeof(int));
    
            var techPositionIncrementParameter = techPositionIncrement.HasValue ?
                new ObjectParameter("TechPositionIncrement", techPositionIncrement) :
                new ObjectParameter("TechPositionIncrement", typeof(int));
    
            var statusParameter = status != null ?
                new ObjectParameter("Status", status) :
                new ObjectParameter("Status", typeof(string));
    
            var reasonParameter = reason != null ?
                new ObjectParameter("Reason", reason) :
                new ObjectParameter("Reason", typeof(string));
    
            var reasonDetailsParameter = reasonDetails != null ?
                new ObjectParameter("ReasonDetails", reasonDetails) :
                new ObjectParameter("ReasonDetails", typeof(string));
    
            var orderStatusParameter = orderStatus != null ?
                new ObjectParameter("OrderStatus", orderStatus) :
                new ObjectParameter("OrderStatus", typeof(string));
    
            var quote_RevisionParameter = quote_Revision.HasValue ?
                new ObjectParameter("Quote_Revision", quote_Revision) :
                new ObjectParameter("Quote_Revision", typeof(short));
    
            var application_EnggParameter = application_Engg != null ?
                new ObjectParameter("Application_Engg", application_Engg) :
                new ObjectParameter("Application_Engg", typeof(string));
    
            var sale_EngineerParameter = sale_Engineer != null ?
                new ObjectParameter("Sale_Engineer", sale_Engineer) :
                new ObjectParameter("Sale_Engineer", typeof(string));
    
            var distributorIdParameter = distributorId.HasValue ?
                new ObjectParameter("DistributorId", distributorId) :
                new ObjectParameter("DistributorId", typeof(int));
    
            var salesOrderNumberParameter = salesOrderNumber.HasValue ?
                new ObjectParameter("SalesOrderNumber", salesOrderNumber) :
                new ObjectParameter("SalesOrderNumber", typeof(int));
    
            var customerTypeParameter = customerType.HasValue ?
                new ObjectParameter("CustomerType", customerType) :
                new ObjectParameter("CustomerType", typeof(int));
    
            var probabilityPOParameter = probabilityPO.HasValue ?
                new ObjectParameter("ProbabilityPO", probabilityPO) :
                new ObjectParameter("ProbabilityPO", typeof(int));
    
            var probabilityEODParameter = probabilityEOD.HasValue ?
                new ObjectParameter("ProbabilityEOD", probabilityEOD) :
                new ObjectParameter("ProbabilityEOD", typeof(int));
    
            var oEM_cust_cityParameter = oEM_cust_city != null ?
                new ObjectParameter("OEM_cust_city", oEM_cust_city) :
                new ObjectParameter("OEM_cust_city", typeof(string));
    
            var oEM_cust_countryParameter = oEM_cust_country != null ?
                new ObjectParameter("OEM_cust_country", oEM_cust_country) :
                new ObjectParameter("OEM_cust_country", typeof(string));
    
            var oEM_cust_nameParameter = oEM_cust_name != null ?
                new ObjectParameter("OEM_cust_name", oEM_cust_name) :
                new ObjectParameter("OEM_cust_name", typeof(string));
    
            var oEM_cust_stateParameter = oEM_cust_state != null ?
                new ObjectParameter("OEM_cust_state", oEM_cust_state) :
                new ObjectParameter("OEM_cust_state", typeof(string));
    
            var oEM_cust_streetParameter = oEM_cust_street != null ?
                new ObjectParameter("OEM_cust_street", oEM_cust_street) :
                new ObjectParameter("OEM_cust_street", typeof(string));
    
            var oEM_cust_zipParameter = oEM_cust_zip != null ?
                new ObjectParameter("OEM_cust_zip", oEM_cust_zip) :
                new ObjectParameter("OEM_cust_zip", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_CreateUpdateQuote", operationFlagParameter, copiedQuoteNumberParameter, quote_numberParameter, quote_expectedorder_dateParameter, quote_rec_dateParameter, quote_due_dateParameter, quote_issued_dateParameter, sales_officeParameter, sales_groupParameter, cust_nameParameter, cust_streetParameter, cust_cityParameter, cust_zipParameter, cust_stateParameter, cust_countryParameter, cust_sap_numberParameter, contact_salutationParameter, contact_fnameParameter, contact_lnameParameter, contact_telbusParameter, contact_telmobileParameter, contact_telfaxParameter, contact_emailParameter, descriptionParameter, est_priceParameter, createdByParameter, modifiedByParameter, lineItemIncrementParameter, techPositionIncrementParameter, statusParameter, reasonParameter, reasonDetailsParameter, orderStatusParameter, quote_RevisionParameter, application_EnggParameter, sale_EngineerParameter, distributorIdParameter, salesOrderNumberParameter, customerTypeParameter, probabilityPOParameter, probabilityEODParameter, oEM_cust_cityParameter, oEM_cust_countryParameter, oEM_cust_nameParameter, oEM_cust_stateParameter, oEM_cust_streetParameter, oEM_cust_zipParameter);
        }
    
        public virtual int SP_Delete_Section(Nullable<int> id, Nullable<int> operationFlag)
        {
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Delete_Section", idParameter, operationFlagParameter);
        }
    
        public virtual int SP_DeletePipingParts(Nullable<int> quoteId, Nullable<int> sectionNumber, Nullable<int> subAssemblyId, string conduit, string operatingUser)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subAssemblyIdParameter = subAssemblyId.HasValue ?
                new ObjectParameter("SubAssemblyId", subAssemblyId) :
                new ObjectParameter("SubAssemblyId", typeof(int));
    
            var conduitParameter = conduit != null ?
                new ObjectParameter("Conduit", conduit) :
                new ObjectParameter("Conduit", typeof(string));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_DeletePipingParts", quoteIdParameter, sectionNumberParameter, subAssemblyIdParameter, conduitParameter, operatingUserParameter);
        }
    
        public virtual int SP_EditSection(Nullable<int> quoteID, string sectiontype, Nullable<int> sectionNumber, string sectionDescription, Nullable<double> defaultPartMargin, Nullable<int> qty, string operatingUser, Nullable<int> oldSectionOrder, Nullable<int> newSectionOrder, Nullable<int> operationFlag)
        {
            var quoteIDParameter = quoteID.HasValue ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(int));
    
            var sectiontypeParameter = sectiontype != null ?
                new ObjectParameter("Sectiontype", sectiontype) :
                new ObjectParameter("Sectiontype", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var sectionDescriptionParameter = sectionDescription != null ?
                new ObjectParameter("SectionDescription", sectionDescription) :
                new ObjectParameter("SectionDescription", typeof(string));
    
            var defaultPartMarginParameter = defaultPartMargin.HasValue ?
                new ObjectParameter("DefaultPartMargin", defaultPartMargin) :
                new ObjectParameter("DefaultPartMargin", typeof(double));
    
            var qtyParameter = qty.HasValue ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var oldSectionOrderParameter = oldSectionOrder.HasValue ?
                new ObjectParameter("OldSectionOrder", oldSectionOrder) :
                new ObjectParameter("OldSectionOrder", typeof(int));
    
            var newSectionOrderParameter = newSectionOrder.HasValue ?
                new ObjectParameter("NewSectionOrder", newSectionOrder) :
                new ObjectParameter("NewSectionOrder", typeof(int));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_EditSection", quoteIDParameter, sectiontypeParameter, sectionNumberParameter, sectionDescriptionParameter, defaultPartMarginParameter, qtyParameter, operatingUserParameter, oldSectionOrderParameter, newSectionOrderParameter, operationFlagParameter);
        }
    
        public virtual ObjectResult<string> sp_generate_inserts(string table_name, string target_table, Nullable<bool> include_column_list, string from, Nullable<bool> include_timestamp, Nullable<bool> debug_mode, string owner, Nullable<bool> ommit_images, Nullable<bool> ommit_identity, Nullable<int> top, string cols_to_include, string cols_to_exclude, Nullable<bool> disable_constraints, Nullable<bool> ommit_computed_cols)
        {
            var table_nameParameter = table_name != null ?
                new ObjectParameter("table_name", table_name) :
                new ObjectParameter("table_name", typeof(string));
    
            var target_tableParameter = target_table != null ?
                new ObjectParameter("target_table", target_table) :
                new ObjectParameter("target_table", typeof(string));
    
            var include_column_listParameter = include_column_list.HasValue ?
                new ObjectParameter("include_column_list", include_column_list) :
                new ObjectParameter("include_column_list", typeof(bool));
    
            var fromParameter = from != null ?
                new ObjectParameter("from", from) :
                new ObjectParameter("from", typeof(string));
    
            var include_timestampParameter = include_timestamp.HasValue ?
                new ObjectParameter("include_timestamp", include_timestamp) :
                new ObjectParameter("include_timestamp", typeof(bool));
    
            var debug_modeParameter = debug_mode.HasValue ?
                new ObjectParameter("debug_mode", debug_mode) :
                new ObjectParameter("debug_mode", typeof(bool));
    
            var ownerParameter = owner != null ?
                new ObjectParameter("owner", owner) :
                new ObjectParameter("owner", typeof(string));
    
            var ommit_imagesParameter = ommit_images.HasValue ?
                new ObjectParameter("ommit_images", ommit_images) :
                new ObjectParameter("ommit_images", typeof(bool));
    
            var ommit_identityParameter = ommit_identity.HasValue ?
                new ObjectParameter("ommit_identity", ommit_identity) :
                new ObjectParameter("ommit_identity", typeof(bool));
    
            var topParameter = top.HasValue ?
                new ObjectParameter("top", top) :
                new ObjectParameter("top", typeof(int));
    
            var cols_to_includeParameter = cols_to_include != null ?
                new ObjectParameter("cols_to_include", cols_to_include) :
                new ObjectParameter("cols_to_include", typeof(string));
    
            var cols_to_excludeParameter = cols_to_exclude != null ?
                new ObjectParameter("cols_to_exclude", cols_to_exclude) :
                new ObjectParameter("cols_to_exclude", typeof(string));
    
            var disable_constraintsParameter = disable_constraints.HasValue ?
                new ObjectParameter("disable_constraints", disable_constraints) :
                new ObjectParameter("disable_constraints", typeof(bool));
    
            var ommit_computed_colsParameter = ommit_computed_cols.HasValue ?
                new ObjectParameter("ommit_computed_cols", ommit_computed_cols) :
                new ObjectParameter("ommit_computed_cols", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("sp_generate_inserts", table_nameParameter, target_tableParameter, include_column_listParameter, fromParameter, include_timestampParameter, debug_modeParameter, ownerParameter, ommit_imagesParameter, ommit_identityParameter, topParameter, cols_to_includeParameter, cols_to_excludeParameter, disable_constraintsParameter, ommit_computed_colsParameter);
        }
    
        public virtual ObjectResult<SP_GetApprovedQuoteDetails_Result> SP_GetApprovedQuoteDetails(string loggedUSer)
        {
            var loggedUSerParameter = loggedUSer != null ?
                new ObjectParameter("LoggedUSer", loggedUSer) :
                new ObjectParameter("LoggedUSer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetApprovedQuoteDetails_Result>("SP_GetApprovedQuoteDetails", loggedUSerParameter);
        }
    
        public virtual ObjectResult<SP_GetBOMReport_Result> SP_GetBOMReport(Nullable<long> quoteID)
        {
            var quoteIDParameter = quoteID.HasValue ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetBOMReport_Result>("SP_GetBOMReport", quoteIDParameter);
        }
    
        public virtual ObjectResult<SP_GetConstantList_Result> SP_GetConstantList(string name, Nullable<int> type, Nullable<bool> isManufacturing, string category)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var typeParameter = type.HasValue ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(int));
    
            var isManufacturingParameter = isManufacturing.HasValue ?
                new ObjectParameter("isManufacturing", isManufacturing) :
                new ObjectParameter("isManufacturing", typeof(bool));
    
            var categoryParameter = category != null ?
                new ObjectParameter("category", category) :
                new ObjectParameter("category", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetConstantList_Result>("SP_GetConstantList", nameParameter, typeParameter, isManufacturingParameter, categoryParameter);
        }
    
        public virtual int SP_GetCustomerInfo(string quoteID, ObjectParameter customerName, ObjectParameter customerStreet, ObjectParameter customerCity, ObjectParameter customerZip, ObjectParameter customerState, ObjectParameter customerCountry, ObjectParameter reference)
        {
            var quoteIDParameter = quoteID != null ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetCustomerInfo", quoteIDParameter, customerName, customerStreet, customerCity, customerZip, customerState, customerCountry, reference);
        }
    
        public virtual ObjectResult<SP_GetFieldDetails_Result> SP_GetFieldDetails(string fieldName)
        {
            var fieldNameParameter = fieldName != null ?
                new ObjectParameter("FieldName", fieldName) :
                new ObjectParameter("FieldName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetFieldDetails_Result>("SP_GetFieldDetails", fieldNameParameter);
        }
    
        public virtual ObjectResult<SP_GetPartsInBOM_Result> SP_GetPartsInBOM(Nullable<long> quoteId, Nullable<int> sectionId, Nullable<int> subAssembly)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("quoteId", quoteId) :
                new ObjectParameter("quoteId", typeof(long));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("sectionId", sectionId) :
                new ObjectParameter("sectionId", typeof(int));
    
            var subAssemblyParameter = subAssembly.HasValue ?
                new ObjectParameter("subAssembly", subAssembly) :
                new ObjectParameter("subAssembly", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPartsInBOM_Result>("SP_GetPartsInBOM", quoteIdParameter, sectionIdParameter, subAssemblyParameter);
        }
    
        public virtual ObjectResult<SP_GetPipingComponent_Result> SP_GetPipingComponent()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPipingComponent_Result>("SP_GetPipingComponent");
        }
    
        public virtual ObjectResult<string> SP_GetPipingOptionsList(string name, string conduit, string unit, string pipingMtl, string joint, string component, string pipingSize, string pipingSch, string pipingType)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var conduitParameter = conduit != null ?
                new ObjectParameter("Conduit", conduit) :
                new ObjectParameter("Conduit", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var pipingMtlParameter = pipingMtl != null ?
                new ObjectParameter("PipingMtl", pipingMtl) :
                new ObjectParameter("PipingMtl", typeof(string));
    
            var jointParameter = joint != null ?
                new ObjectParameter("Joint", joint) :
                new ObjectParameter("Joint", typeof(string));
    
            var componentParameter = component != null ?
                new ObjectParameter("Component", component) :
                new ObjectParameter("Component", typeof(string));
    
            var pipingSizeParameter = pipingSize != null ?
                new ObjectParameter("PipingSize", pipingSize) :
                new ObjectParameter("PipingSize", typeof(string));
    
            var pipingSchParameter = pipingSch != null ?
                new ObjectParameter("PipingSch", pipingSch) :
                new ObjectParameter("PipingSch", typeof(string));
    
            var pipingTypeParameter = pipingType != null ?
                new ObjectParameter("PipingType", pipingType) :
                new ObjectParameter("PipingType", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<string>("SP_GetPipingOptionsList", nameParameter, conduitParameter, unitParameter, pipingMtlParameter, jointParameter, componentParameter, pipingSizeParameter, pipingSchParameter, pipingTypeParameter);
        }
    
        public virtual ObjectResult<SP_GetPipingPartList_Result> SP_GetPipingPartList(string pipingSize, string pipingType, string pipingMtl, string pipingSch, string conduit, string unit, string component, string joint, Nullable<int> dataRowCount)
        {
            var pipingSizeParameter = pipingSize != null ?
                new ObjectParameter("PipingSize", pipingSize) :
                new ObjectParameter("PipingSize", typeof(string));
    
            var pipingTypeParameter = pipingType != null ?
                new ObjectParameter("PipingType", pipingType) :
                new ObjectParameter("PipingType", typeof(string));
    
            var pipingMtlParameter = pipingMtl != null ?
                new ObjectParameter("PipingMtl", pipingMtl) :
                new ObjectParameter("PipingMtl", typeof(string));
    
            var pipingSchParameter = pipingSch != null ?
                new ObjectParameter("PipingSch", pipingSch) :
                new ObjectParameter("PipingSch", typeof(string));
    
            var conduitParameter = conduit != null ?
                new ObjectParameter("Conduit", conduit) :
                new ObjectParameter("Conduit", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var componentParameter = component != null ?
                new ObjectParameter("Component", component) :
                new ObjectParameter("Component", typeof(string));
    
            var jointParameter = joint != null ?
                new ObjectParameter("Joint", joint) :
                new ObjectParameter("Joint", typeof(string));
    
            var dataRowCountParameter = dataRowCount.HasValue ?
                new ObjectParameter("DataRowCount", dataRowCount) :
                new ObjectParameter("DataRowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPipingPartList_Result>("SP_GetPipingPartList", pipingSizeParameter, pipingTypeParameter, pipingMtlParameter, pipingSchParameter, conduitParameter, unitParameter, componentParameter, jointParameter, dataRowCountParameter);
        }
    
        public virtual ObjectResult<SP_GetPipingSchemMapping_Result> SP_GetPipingSchemMapping(string pipingSize, string pipingMtl, string pipingSch, string unit, string component, string joint, string conduit)
        {
            var pipingSizeParameter = pipingSize != null ?
                new ObjectParameter("PipingSize", pipingSize) :
                new ObjectParameter("PipingSize", typeof(string));
    
            var pipingMtlParameter = pipingMtl != null ?
                new ObjectParameter("PipingMtl", pipingMtl) :
                new ObjectParameter("PipingMtl", typeof(string));
    
            var pipingSchParameter = pipingSch != null ?
                new ObjectParameter("PipingSch", pipingSch) :
                new ObjectParameter("PipingSch", typeof(string));
    
            var unitParameter = unit != null ?
                new ObjectParameter("Unit", unit) :
                new ObjectParameter("Unit", typeof(string));
    
            var componentParameter = component != null ?
                new ObjectParameter("Component", component) :
                new ObjectParameter("Component", typeof(string));
    
            var jointParameter = joint != null ?
                new ObjectParameter("Joint", joint) :
                new ObjectParameter("Joint", typeof(string));
    
            var conduitParameter = conduit != null ?
                new ObjectParameter("Conduit", conduit) :
                new ObjectParameter("Conduit", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetPipingSchemMapping_Result>("SP_GetPipingSchemMapping", pipingSizeParameter, pipingMtlParameter, pipingSchParameter, unitParameter, componentParameter, jointParameter, conduitParameter);
        }
    
        public virtual ObjectResult<SP_GetQuoteReport_Result> SP_GetQuoteReport(string quoteID)
        {
            var quoteIDParameter = quoteID != null ?
                new ObjectParameter("QuoteID", quoteID) :
                new ObjectParameter("QuoteID", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetQuoteReport_Result>("SP_GetQuoteReport", quoteIDParameter);
        }
    
        public virtual ObjectResult<SP_GetSAPAccumulatorPartList_Result> SP_GetSAPAccumulatorPartList(ObjectParameter errorCode, string @class, Nullable<int> dataRowCount)
        {
            var classParameter = @class != null ?
                new ObjectParameter("Class", @class) :
                new ObjectParameter("Class", typeof(string));
    
            var dataRowCountParameter = dataRowCount.HasValue ?
                new ObjectParameter("DataRowCount", dataRowCount) :
                new ObjectParameter("DataRowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSAPAccumulatorPartList_Result>("SP_GetSAPAccumulatorPartList", errorCode, classParameter, dataRowCountParameter);
        }
    
        public virtual ObjectResult<SP_GetSAPFlangePartList_Result> SP_GetSAPFlangePartList(ObjectParameter errorCode, string flangePad, string flangeType, string flangePattern, Nullable<int> dataRowCount)
        {
            var flangePadParameter = flangePad != null ?
                new ObjectParameter("FlangePad", flangePad) :
                new ObjectParameter("FlangePad", typeof(string));
    
            var flangeTypeParameter = flangeType != null ?
                new ObjectParameter("FlangeType", flangeType) :
                new ObjectParameter("FlangeType", typeof(string));
    
            var flangePatternParameter = flangePattern != null ?
                new ObjectParameter("FlangePattern", flangePattern) :
                new ObjectParameter("FlangePattern", typeof(string));
    
            var dataRowCountParameter = dataRowCount.HasValue ?
                new ObjectParameter("DataRowCount", dataRowCount) :
                new ObjectParameter("DataRowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSAPFlangePartList_Result>("SP_GetSAPFlangePartList", errorCode, flangePadParameter, flangeTypeParameter, flangePatternParameter, dataRowCountParameter);
        }
    
        public virtual ObjectResult<SP_GetSAPMotorPartList_Result> SP_GetSAPMotorPartList(ObjectParameter errorCode, string manufacturer, string rPM, string horsePower, string voltage, Nullable<int> dataRowCount)
        {
            var manufacturerParameter = manufacturer != null ?
                new ObjectParameter("Manufacturer", manufacturer) :
                new ObjectParameter("Manufacturer", typeof(string));
    
            var rPMParameter = rPM != null ?
                new ObjectParameter("RPM", rPM) :
                new ObjectParameter("RPM", typeof(string));
    
            var horsePowerParameter = horsePower != null ?
                new ObjectParameter("HorsePower", horsePower) :
                new ObjectParameter("HorsePower", typeof(string));
    
            var voltageParameter = voltage != null ?
                new ObjectParameter("Voltage", voltage) :
                new ObjectParameter("Voltage", typeof(string));
    
            var dataRowCountParameter = dataRowCount.HasValue ?
                new ObjectParameter("DataRowCount", dataRowCount) :
                new ObjectParameter("DataRowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSAPMotorPartList_Result>("SP_GetSAPMotorPartList", errorCode, manufacturerParameter, rPMParameter, horsePowerParameter, voltageParameter, dataRowCountParameter);
        }
    
        public virtual ObjectResult<SP_GetSAPPartList_Result> SP_GetSAPPartList(ObjectParameter errorCode, string searchString, Nullable<int> dataRowCount)
        {
            var searchStringParameter = searchString != null ?
                new ObjectParameter("SearchString", searchString) :
                new ObjectParameter("SearchString", typeof(string));
    
            var dataRowCountParameter = dataRowCount.HasValue ?
                new ObjectParameter("DataRowCount", dataRowCount) :
                new ObjectParameter("DataRowCount", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSAPPartList_Result>("SP_GetSAPPartList", errorCode, searchStringParameter, dataRowCountParameter);
        }
    
        public virtual ObjectResult<SP_GetSectionList_Result> SP_GetSectionList(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetSectionList_Result>("SP_GetSectionList", quoteIdParameter);
        }
    
        public virtual ObjectResult<SP_GetStatus_Result> SP_GetStatus()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetStatus_Result>("SP_GetStatus");
        }
    
        public virtual ObjectResult<SP_GetUserDetails_Result> SP_GetUserDetails(string appRoleName)
        {
            var appRoleNameParameter = appRoleName != null ?
                new ObjectParameter("AppRoleName", appRoleName) :
                new ObjectParameter("AppRoleName", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_GetUserDetails_Result>("SP_GetUserDetails", appRoleNameParameter);
        }
    
        public virtual int SP_GetUserList(Nullable<int> userId)
        {
            var userIdParameter = userId.HasValue ?
                new ObjectParameter("UserId", userId) :
                new ObjectParameter("UserId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_GetUserList", userIdParameter);
        }
    
        public virtual int SP_ImportSAPData(string operatingUser)
        {
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ImportSAPData", operatingUserParameter);
        }
    
        public virtual int SP_LogDebug(string name, string value, Nullable<bool> isClear)
        {
            var nameParameter = name != null ?
                new ObjectParameter("Name", name) :
                new ObjectParameter("Name", typeof(string));
    
            var valueParameter = value != null ?
                new ObjectParameter("Value", value) :
                new ObjectParameter("Value", typeof(string));
    
            var isClearParameter = isClear.HasValue ?
                new ObjectParameter("IsClear", isClear) :
                new ObjectParameter("IsClear", typeof(bool));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_LogDebug", nameParameter, valueParameter, isClearParameter);
        }
    
        public virtual ObjectResult<SP_PipingSchem_Result> SP_PipingSchem(string conduit, string material, string joint, string size, string type, string schedule, string component)
        {
            var conduitParameter = conduit != null ?
                new ObjectParameter("conduit", conduit) :
                new ObjectParameter("conduit", typeof(string));
    
            var materialParameter = material != null ?
                new ObjectParameter("material", material) :
                new ObjectParameter("material", typeof(string));
    
            var jointParameter = joint != null ?
                new ObjectParameter("joint", joint) :
                new ObjectParameter("joint", typeof(string));
    
            var sizeParameter = size != null ?
                new ObjectParameter("size", size) :
                new ObjectParameter("size", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            var scheduleParameter = schedule != null ?
                new ObjectParameter("schedule", schedule) :
                new ObjectParameter("schedule", typeof(string));
    
            var componentParameter = component != null ?
                new ObjectParameter("component", component) :
                new ObjectParameter("component", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_PipingSchem_Result>("SP_PipingSchem", conduitParameter, materialParameter, jointParameter, sizeParameter, typeParameter, scheduleParameter, componentParameter);
        }
    
        public virtual ObjectResult<SP_Quote_Approver_Details_Result> SP_Quote_Approver_Details(Nullable<int> quote_Auto)
        {
            var quote_AutoParameter = quote_Auto.HasValue ?
                new ObjectParameter("Quote_Auto", quote_Auto) :
                new ObjectParameter("Quote_Auto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Quote_Approver_Details_Result>("SP_Quote_Approver_Details", quote_AutoParameter);
        }
    
        public virtual int SP_ResumeQuote(Nullable<int> quoteId)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_ResumeQuote", quoteIdParameter);
        }
    
        public virtual ObjectResult<SP_Select_SAPParts_Result> SP_Select_SAPParts(string sHIPPABLEASSEMBLY, ObjectParameter sAPPART, ObjectParameter dESC)
        {
            var sHIPPABLEASSEMBLYParameter = sHIPPABLEASSEMBLY != null ?
                new ObjectParameter("SHIPPABLEASSEMBLY", sHIPPABLEASSEMBLY) :
                new ObjectParameter("SHIPPABLEASSEMBLY", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_Select_SAPParts_Result>("SP_Select_SAPParts", sHIPPABLEASSEMBLYParameter, sAPPART, dESC);
        }
    
        public virtual ObjectResult<SP_SelectQuoteBasedOnId_Result> SP_SelectQuoteBasedOnId(Nullable<int> quoteNo)
        {
            var quoteNoParameter = quoteNo.HasValue ?
                new ObjectParameter("QuoteNo", quoteNo) :
                new ObjectParameter("QuoteNo", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectQuoteBasedOnId_Result>("SP_SelectQuoteBasedOnId", quoteNoParameter);
        }
    
        public virtual ObjectResult<SP_SelectQuotes_Result> SP_SelectQuotes(string loggedUSer)
        {
            var loggedUSerParameter = loggedUSer != null ?
                new ObjectParameter("LoggedUSer", loggedUSer) :
                new ObjectParameter("LoggedUSer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectQuotes_Result>("SP_SelectQuotes", loggedUSerParameter);
        }
    
        public virtual int SP_SelectQuotes_NotUSed(string loggedUSer)
        {
            var loggedUSerParameter = loggedUSer != null ?
                new ObjectParameter("LoggedUSer", loggedUSer) :
                new ObjectParameter("LoggedUSer", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SelectQuotes_NotUSed", loggedUSerParameter);
        }
    
        public virtual ObjectResult<SP_SelectQuotesBasedOnQuotenumber_Result> SP_SelectQuotesBasedOnQuotenumber(Nullable<long> quotenumber)
        {
            var quotenumberParameter = quotenumber.HasValue ?
                new ObjectParameter("Quotenumber", quotenumber) :
                new ObjectParameter("Quotenumber", typeof(long));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<SP_SelectQuotesBasedOnQuotenumber_Result>("SP_SelectQuotesBasedOnQuotenumber", quotenumberParameter);
        }
    
        public virtual int SP_Send_Quote_Mails(Nullable<int> quote_Auto)
        {
            var quote_AutoParameter = quote_Auto.HasValue ?
                new ObjectParameter("Quote_Auto", quote_Auto) :
                new ObjectParameter("Quote_Auto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_Send_Quote_Mails", quote_AutoParameter);
        }
    
        public virtual int SP_SubAssembly_Delete(Nullable<int> subAssemblyId, Nullable<int> operationFlag)
        {
            var subAssemblyIdParameter = subAssemblyId.HasValue ?
                new ObjectParameter("SubAssemblyId", subAssemblyId) :
                new ObjectParameter("SubAssemblyId", typeof(int));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_SubAssembly_Delete", subAssemblyIdParameter, operationFlagParameter);
        }
    
        public virtual int SP_UpdateLaborData(ObjectParameter errorCode, Nullable<int> quoteNumber, Nullable<int> sectionNumber, Nullable<int> subassemblyID, string operatingUser, string updateField, string updateValue)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subassemblyIDParameter = subassemblyID.HasValue ?
                new ObjectParameter("SubassemblyID", subassemblyID) :
                new ObjectParameter("SubassemblyID", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var updateFieldParameter = updateField != null ?
                new ObjectParameter("UpdateField", updateField) :
                new ObjectParameter("UpdateField", typeof(string));
    
            var updateValueParameter = updateValue != null ?
                new ObjectParameter("UpdateValue", updateValue) :
                new ObjectParameter("UpdateValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateLaborData", errorCode, quoteNumberParameter, sectionNumberParameter, subassemblyIDParameter, operatingUserParameter, updateFieldParameter, updateValueParameter);
        }
    
        public virtual int SP_UpdateLaborHours(ObjectParameter errorCode, Nullable<int> quoteNumber, Nullable<int> sectionNumber, Nullable<int> subassemblyID, string operatingUser, Nullable<double> engineeringHours, Nullable<double> designHours, Nullable<double> wiringDesignHours, Nullable<double> pickPartsHours, Nullable<double> assemblyHours, Nullable<double> wiringHours, Nullable<double> weldingHours, Nullable<double> testHours, Nullable<double> shippingTagHours, Nullable<double> paintHours, Nullable<double> docHours, Nullable<double> controlsEngineeringHours, Nullable<double> machiningManHours, Nullable<double> machiningCncHours, Nullable<double> programmingHours, Nullable<double> totalLaborHours, Nullable<double> totalLaborCost)
        {
            var quoteNumberParameter = quoteNumber.HasValue ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(int));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var subassemblyIDParameter = subassemblyID.HasValue ?
                new ObjectParameter("SubassemblyID", subassemblyID) :
                new ObjectParameter("SubassemblyID", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var engineeringHoursParameter = engineeringHours.HasValue ?
                new ObjectParameter("EngineeringHours", engineeringHours) :
                new ObjectParameter("EngineeringHours", typeof(double));
    
            var designHoursParameter = designHours.HasValue ?
                new ObjectParameter("DesignHours", designHours) :
                new ObjectParameter("DesignHours", typeof(double));
    
            var wiringDesignHoursParameter = wiringDesignHours.HasValue ?
                new ObjectParameter("WiringDesignHours", wiringDesignHours) :
                new ObjectParameter("WiringDesignHours", typeof(double));
    
            var pickPartsHoursParameter = pickPartsHours.HasValue ?
                new ObjectParameter("PickPartsHours", pickPartsHours) :
                new ObjectParameter("PickPartsHours", typeof(double));
    
            var assemblyHoursParameter = assemblyHours.HasValue ?
                new ObjectParameter("AssemblyHours", assemblyHours) :
                new ObjectParameter("AssemblyHours", typeof(double));
    
            var wiringHoursParameter = wiringHours.HasValue ?
                new ObjectParameter("WiringHours", wiringHours) :
                new ObjectParameter("WiringHours", typeof(double));
    
            var weldingHoursParameter = weldingHours.HasValue ?
                new ObjectParameter("WeldingHours", weldingHours) :
                new ObjectParameter("WeldingHours", typeof(double));
    
            var testHoursParameter = testHours.HasValue ?
                new ObjectParameter("TestHours", testHours) :
                new ObjectParameter("TestHours", typeof(double));
    
            var shippingTagHoursParameter = shippingTagHours.HasValue ?
                new ObjectParameter("ShippingTagHours", shippingTagHours) :
                new ObjectParameter("ShippingTagHours", typeof(double));
    
            var paintHoursParameter = paintHours.HasValue ?
                new ObjectParameter("PaintHours", paintHours) :
                new ObjectParameter("PaintHours", typeof(double));
    
            var docHoursParameter = docHours.HasValue ?
                new ObjectParameter("DocHours", docHours) :
                new ObjectParameter("DocHours", typeof(double));
    
            var controlsEngineeringHoursParameter = controlsEngineeringHours.HasValue ?
                new ObjectParameter("ControlsEngineeringHours", controlsEngineeringHours) :
                new ObjectParameter("ControlsEngineeringHours", typeof(double));
    
            var machiningManHoursParameter = machiningManHours.HasValue ?
                new ObjectParameter("MachiningManHours", machiningManHours) :
                new ObjectParameter("MachiningManHours", typeof(double));
    
            var machiningCncHoursParameter = machiningCncHours.HasValue ?
                new ObjectParameter("MachiningCncHours", machiningCncHours) :
                new ObjectParameter("MachiningCncHours", typeof(double));
    
            var programmingHoursParameter = programmingHours.HasValue ?
                new ObjectParameter("ProgrammingHours", programmingHours) :
                new ObjectParameter("ProgrammingHours", typeof(double));
    
            var totalLaborHoursParameter = totalLaborHours.HasValue ?
                new ObjectParameter("TotalLaborHours", totalLaborHours) :
                new ObjectParameter("TotalLaborHours", typeof(double));
    
            var totalLaborCostParameter = totalLaborCost.HasValue ?
                new ObjectParameter("TotalLaborCost", totalLaborCost) :
                new ObjectParameter("TotalLaborCost", typeof(double));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateLaborHours", errorCode, quoteNumberParameter, sectionNumberParameter, subassemblyIDParameter, operatingUserParameter, engineeringHoursParameter, designHoursParameter, wiringDesignHoursParameter, pickPartsHoursParameter, assemblyHoursParameter, wiringHoursParameter, weldingHoursParameter, testHoursParameter, shippingTagHoursParameter, paintHoursParameter, docHoursParameter, controlsEngineeringHoursParameter, machiningManHoursParameter, machiningCncHoursParameter, programmingHoursParameter, totalLaborHoursParameter, totalLaborCostParameter);
        }
    
        public virtual int SP_UpdatePaintPipingPart(Nullable<int> quoteId, Nullable<int> sectionId, Nullable<int> subAssemblyId, string newPaintRequirement, string operatingUser)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("QuoteId", quoteId) :
                new ObjectParameter("QuoteId", typeof(int));
    
            var sectionIdParameter = sectionId.HasValue ?
                new ObjectParameter("SectionId", sectionId) :
                new ObjectParameter("SectionId", typeof(int));
    
            var subAssemblyIdParameter = subAssemblyId.HasValue ?
                new ObjectParameter("SubAssemblyId", subAssemblyId) :
                new ObjectParameter("SubAssemblyId", typeof(int));
    
            var newPaintRequirementParameter = newPaintRequirement != null ?
                new ObjectParameter("NewPaintRequirement", newPaintRequirement) :
                new ObjectParameter("NewPaintRequirement", typeof(string));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdatePaintPipingPart", quoteIdParameter, sectionIdParameter, subAssemblyIdParameter, newPaintRequirementParameter, operatingUserParameter);
        }
    
        public virtual int SP_UpdatePipingLaborData()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdatePipingLaborData");
        }
    
        public virtual int sp_UpdateQuote(Nullable<int> auto, string quote_number, string quoter, Nullable<System.DateTime> quote_started_date, Nullable<System.DateTime> quote_rec_date, Nullable<System.DateTime> quote_due_date, Nullable<System.DateTime> quote_issued_date, Nullable<int> sales_office, Nullable<int> sales_group, string cust_name, string cust_street, string cust_city, string cust_zip, string cust_state, string cust_country, string cust_sap_number, string contact_salutation, string contact_fname, string contact_lname, string contact_telbus, string contact_telmobile, string contact_telfax, string contact_email, string description, Nullable<double> est_price, string createdBy, Nullable<System.DateTime> createdDate, string modifiedBy, Nullable<System.DateTime> modifiedDate)
        {
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(int));
    
            var quote_numberParameter = quote_number != null ?
                new ObjectParameter("Quote_number", quote_number) :
                new ObjectParameter("Quote_number", typeof(string));
    
            var quoterParameter = quoter != null ?
                new ObjectParameter("quoter", quoter) :
                new ObjectParameter("quoter", typeof(string));
    
            var quote_started_dateParameter = quote_started_date.HasValue ?
                new ObjectParameter("quote_started_date", quote_started_date) :
                new ObjectParameter("quote_started_date", typeof(System.DateTime));
    
            var quote_rec_dateParameter = quote_rec_date.HasValue ?
                new ObjectParameter("quote_rec_date", quote_rec_date) :
                new ObjectParameter("quote_rec_date", typeof(System.DateTime));
    
            var quote_due_dateParameter = quote_due_date.HasValue ?
                new ObjectParameter("quote_due_date", quote_due_date) :
                new ObjectParameter("quote_due_date", typeof(System.DateTime));
    
            var quote_issued_dateParameter = quote_issued_date.HasValue ?
                new ObjectParameter("quote_issued_date", quote_issued_date) :
                new ObjectParameter("quote_issued_date", typeof(System.DateTime));
    
            var sales_officeParameter = sales_office.HasValue ?
                new ObjectParameter("sales_office", sales_office) :
                new ObjectParameter("sales_office", typeof(int));
    
            var sales_groupParameter = sales_group.HasValue ?
                new ObjectParameter("sales_group", sales_group) :
                new ObjectParameter("sales_group", typeof(int));
    
            var cust_nameParameter = cust_name != null ?
                new ObjectParameter("cust_name", cust_name) :
                new ObjectParameter("cust_name", typeof(string));
    
            var cust_streetParameter = cust_street != null ?
                new ObjectParameter("cust_street", cust_street) :
                new ObjectParameter("cust_street", typeof(string));
    
            var cust_cityParameter = cust_city != null ?
                new ObjectParameter("cust_city", cust_city) :
                new ObjectParameter("cust_city", typeof(string));
    
            var cust_zipParameter = cust_zip != null ?
                new ObjectParameter("cust_zip", cust_zip) :
                new ObjectParameter("cust_zip", typeof(string));
    
            var cust_stateParameter = cust_state != null ?
                new ObjectParameter("cust_state", cust_state) :
                new ObjectParameter("cust_state", typeof(string));
    
            var cust_countryParameter = cust_country != null ?
                new ObjectParameter("cust_country", cust_country) :
                new ObjectParameter("cust_country", typeof(string));
    
            var cust_sap_numberParameter = cust_sap_number != null ?
                new ObjectParameter("cust_sap_number", cust_sap_number) :
                new ObjectParameter("cust_sap_number", typeof(string));
    
            var contact_salutationParameter = contact_salutation != null ?
                new ObjectParameter("contact_salutation", contact_salutation) :
                new ObjectParameter("contact_salutation", typeof(string));
    
            var contact_fnameParameter = contact_fname != null ?
                new ObjectParameter("contact_fname", contact_fname) :
                new ObjectParameter("contact_fname", typeof(string));
    
            var contact_lnameParameter = contact_lname != null ?
                new ObjectParameter("contact_lname", contact_lname) :
                new ObjectParameter("contact_lname", typeof(string));
    
            var contact_telbusParameter = contact_telbus != null ?
                new ObjectParameter("contact_telbus", contact_telbus) :
                new ObjectParameter("contact_telbus", typeof(string));
    
            var contact_telmobileParameter = contact_telmobile != null ?
                new ObjectParameter("contact_telmobile", contact_telmobile) :
                new ObjectParameter("contact_telmobile", typeof(string));
    
            var contact_telfaxParameter = contact_telfax != null ?
                new ObjectParameter("contact_telfax", contact_telfax) :
                new ObjectParameter("contact_telfax", typeof(string));
    
            var contact_emailParameter = contact_email != null ?
                new ObjectParameter("contact_email", contact_email) :
                new ObjectParameter("contact_email", typeof(string));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("description", description) :
                new ObjectParameter("description", typeof(string));
    
            var est_priceParameter = est_price.HasValue ?
                new ObjectParameter("est_price", est_price) :
                new ObjectParameter("est_price", typeof(double));
    
            var createdByParameter = createdBy != null ?
                new ObjectParameter("CreatedBy", createdBy) :
                new ObjectParameter("CreatedBy", typeof(string));
    
            var createdDateParameter = createdDate.HasValue ?
                new ObjectParameter("CreatedDate", createdDate) :
                new ObjectParameter("CreatedDate", typeof(System.DateTime));
    
            var modifiedByParameter = modifiedBy != null ?
                new ObjectParameter("ModifiedBy", modifiedBy) :
                new ObjectParameter("ModifiedBy", typeof(string));
    
            var modifiedDateParameter = modifiedDate.HasValue ?
                new ObjectParameter("ModifiedDate", modifiedDate) :
                new ObjectParameter("ModifiedDate", typeof(System.DateTime));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("sp_UpdateQuote", autoParameter, quote_numberParameter, quoterParameter, quote_started_dateParameter, quote_rec_dateParameter, quote_due_dateParameter, quote_issued_dateParameter, sales_officeParameter, sales_groupParameter, cust_nameParameter, cust_streetParameter, cust_cityParameter, cust_zipParameter, cust_stateParameter, cust_countryParameter, cust_sap_numberParameter, contact_salutationParameter, contact_fnameParameter, contact_lnameParameter, contact_telbusParameter, contact_telmobileParameter, contact_telfaxParameter, contact_emailParameter, descriptionParameter, est_priceParameter, createdByParameter, createdDateParameter, modifiedByParameter, modifiedDateParameter);
        }
    
        public virtual int SP_UpdateQuotePart(ObjectParameter errorCode, ObjectParameter quotePartId, string operatingUser, string updateField, string updateValue)
        {
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var updateFieldParameter = updateField != null ?
                new ObjectParameter("UpdateField", updateField) :
                new ObjectParameter("UpdateField", typeof(string));
    
            var updateValueParameter = updateValue != null ?
                new ObjectParameter("UpdateValue", updateValue) :
                new ObjectParameter("UpdateValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateQuotePart", errorCode, quotePartId, operatingUserParameter, updateFieldParameter, updateValueParameter);
        }
    
        public virtual int SP_UpdateQuoteSectionDataForSummary(ObjectParameter errorCode, string quoteNumber, Nullable<int> sectionNumber, string operatingUser, string updateField, string updateValue)
        {
            var quoteNumberParameter = quoteNumber != null ?
                new ObjectParameter("QuoteNumber", quoteNumber) :
                new ObjectParameter("QuoteNumber", typeof(string));
    
            var sectionNumberParameter = sectionNumber.HasValue ?
                new ObjectParameter("SectionNumber", sectionNumber) :
                new ObjectParameter("SectionNumber", typeof(int));
    
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var updateFieldParameter = updateField != null ?
                new ObjectParameter("UpdateField", updateField) :
                new ObjectParameter("UpdateField", typeof(string));
    
            var updateValueParameter = updateValue != null ?
                new ObjectParameter("UpdateValue", updateValue) :
                new ObjectParameter("UpdateValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateQuoteSectionDataForSummary", errorCode, quoteNumberParameter, sectionNumberParameter, operatingUserParameter, updateFieldParameter, updateValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_UpdateQuoteSubAssemblyPart(ObjectParameter errorCode, ObjectParameter quotePartId, string operatingUser, string updateField, string updateValue)
        {
            var operatingUserParameter = operatingUser != null ?
                new ObjectParameter("OperatingUser", operatingUser) :
                new ObjectParameter("OperatingUser", typeof(string));
    
            var updateFieldParameter = updateField != null ?
                new ObjectParameter("UpdateField", updateField) :
                new ObjectParameter("UpdateField", typeof(string));
    
            var updateValueParameter = updateValue != null ?
                new ObjectParameter("UpdateValue", updateValue) :
                new ObjectParameter("UpdateValue", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_UpdateQuoteSubAssemblyPart", errorCode, quotePartId, operatingUserParameter, updateFieldParameter, updateValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_UpdateSectionOrder(ObjectParameter errorCode, Nullable<int> qN, Nullable<int> sN, Nullable<int> sectionOrder)
        {
            var qNParameter = qN.HasValue ?
                new ObjectParameter("QN", qN) :
                new ObjectParameter("QN", typeof(int));
    
            var sNParameter = sN.HasValue ?
                new ObjectParameter("SN", sN) :
                new ObjectParameter("SN", typeof(int));
    
            var sectionOrderParameter = sectionOrder.HasValue ?
                new ObjectParameter("SectionOrder", sectionOrder) :
                new ObjectParameter("SectionOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_UpdateSectionOrder", errorCode, qNParameter, sNParameter, sectionOrderParameter);
        }
    
        public virtual int SP_UpdateStatus(Nullable<int> quoteId, Nullable<int> distributionChannelList, Nullable<int> typeList, Nullable<int> costApprover, Nullable<int> operationFlag, string comments, Nullable<System.DateTime> dateField, Nullable<int> sellPriceApprover, string isPMEffort, Nullable<decimal> pMValue, string isCommisionEffort, Nullable<decimal> commisionValue)
        {
            var quoteIdParameter = quoteId.HasValue ?
                new ObjectParameter("quoteId", quoteId) :
                new ObjectParameter("quoteId", typeof(int));
    
            var distributionChannelListParameter = distributionChannelList.HasValue ?
                new ObjectParameter("DistributionChannelList", distributionChannelList) :
                new ObjectParameter("DistributionChannelList", typeof(int));
    
            var typeListParameter = typeList.HasValue ?
                new ObjectParameter("TypeList", typeList) :
                new ObjectParameter("TypeList", typeof(int));
    
            var costApproverParameter = costApprover.HasValue ?
                new ObjectParameter("CostApprover", costApprover) :
                new ObjectParameter("CostApprover", typeof(int));
    
            var operationFlagParameter = operationFlag.HasValue ?
                new ObjectParameter("OperationFlag", operationFlag) :
                new ObjectParameter("OperationFlag", typeof(int));
    
            var commentsParameter = comments != null ?
                new ObjectParameter("Comments", comments) :
                new ObjectParameter("Comments", typeof(string));
    
            var dateFieldParameter = dateField.HasValue ?
                new ObjectParameter("DateField", dateField) :
                new ObjectParameter("DateField", typeof(System.DateTime));
    
            var sellPriceApproverParameter = sellPriceApprover.HasValue ?
                new ObjectParameter("SellPriceApprover", sellPriceApprover) :
                new ObjectParameter("SellPriceApprover", typeof(int));
    
            var isPMEffortParameter = isPMEffort != null ?
                new ObjectParameter("IsPMEffort", isPMEffort) :
                new ObjectParameter("IsPMEffort", typeof(string));
    
            var pMValueParameter = pMValue.HasValue ?
                new ObjectParameter("PMValue", pMValue) :
                new ObjectParameter("PMValue", typeof(decimal));
    
            var isCommisionEffortParameter = isCommisionEffort != null ?
                new ObjectParameter("IsCommisionEffort", isCommisionEffort) :
                new ObjectParameter("IsCommisionEffort", typeof(string));
    
            var commisionValueParameter = commisionValue.HasValue ?
                new ObjectParameter("CommisionValue", commisionValue) :
                new ObjectParameter("CommisionValue", typeof(decimal));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("SP_UpdateStatus", quoteIdParameter, distributionChannelListParameter, typeListParameter, costApproverParameter, operationFlagParameter, commentsParameter, dateFieldParameter, sellPriceApproverParameter, isPMEffortParameter, pMValueParameter, isCommisionEffortParameter, commisionValueParameter);
        }
    
        public virtual ObjectResult<Nullable<int>> SP_UpdateSubAssemblyInfo(ObjectParameter errorCode, Nullable<long> subAssemblyId, string description, Nullable<int> subOrder)
        {
            var subAssemblyIdParameter = subAssemblyId.HasValue ?
                new ObjectParameter("SubAssemblyId", subAssemblyId) :
                new ObjectParameter("SubAssemblyId", typeof(long));
    
            var descriptionParameter = description != null ?
                new ObjectParameter("Description", description) :
                new ObjectParameter("Description", typeof(string));
    
            var subOrderParameter = subOrder.HasValue ?
                new ObjectParameter("SubOrder", subOrder) :
                new ObjectParameter("SubOrder", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<Nullable<int>>("SP_UpdateSubAssemblyInfo", errorCode, subAssemblyIdParameter, descriptionParameter, subOrderParameter);
        }
    
        public virtual int daPartsUpdate(string sub, Nullable<int> sN, string lI, string qty, string pN, string tP, string descr, Nullable<decimal> net_cost, string cost, Nullable<int> part_markup, string revision, Nullable<int> original_auto, string original_LI, string original_PN, Nullable<int> original_SN, string original_TP, string original_cost, string original_descr, Nullable<decimal> original_net_cost, Nullable<int> original_part_markup, string original_qty, string original_revision, string original_sub, Nullable<int> auto)
        {
            var subParameter = sub != null ?
                new ObjectParameter("sub", sub) :
                new ObjectParameter("sub", typeof(string));
    
            var sNParameter = sN.HasValue ?
                new ObjectParameter("SN", sN) :
                new ObjectParameter("SN", typeof(int));
    
            var lIParameter = lI != null ?
                new ObjectParameter("LI", lI) :
                new ObjectParameter("LI", typeof(string));
    
            var qtyParameter = qty != null ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(string));
    
            var pNParameter = pN != null ?
                new ObjectParameter("PN", pN) :
                new ObjectParameter("PN", typeof(string));
    
            var tPParameter = tP != null ?
                new ObjectParameter("TP", tP) :
                new ObjectParameter("TP", typeof(string));
    
            var descrParameter = descr != null ?
                new ObjectParameter("descr", descr) :
                new ObjectParameter("descr", typeof(string));
    
            var net_costParameter = net_cost.HasValue ?
                new ObjectParameter("net_cost", net_cost) :
                new ObjectParameter("net_cost", typeof(decimal));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var part_markupParameter = part_markup.HasValue ?
                new ObjectParameter("part_markup", part_markup) :
                new ObjectParameter("part_markup", typeof(int));
    
            var revisionParameter = revision != null ?
                new ObjectParameter("revision", revision) :
                new ObjectParameter("revision", typeof(string));
    
            var original_autoParameter = original_auto.HasValue ?
                new ObjectParameter("Original_auto", original_auto) :
                new ObjectParameter("Original_auto", typeof(int));
    
            var original_LIParameter = original_LI != null ?
                new ObjectParameter("Original_LI", original_LI) :
                new ObjectParameter("Original_LI", typeof(string));
    
            var original_PNParameter = original_PN != null ?
                new ObjectParameter("Original_PN", original_PN) :
                new ObjectParameter("Original_PN", typeof(string));
    
            var original_SNParameter = original_SN.HasValue ?
                new ObjectParameter("Original_SN", original_SN) :
                new ObjectParameter("Original_SN", typeof(int));
    
            var original_TPParameter = original_TP != null ?
                new ObjectParameter("Original_TP", original_TP) :
                new ObjectParameter("Original_TP", typeof(string));
    
            var original_costParameter = original_cost != null ?
                new ObjectParameter("Original_cost", original_cost) :
                new ObjectParameter("Original_cost", typeof(string));
    
            var original_descrParameter = original_descr != null ?
                new ObjectParameter("Original_descr", original_descr) :
                new ObjectParameter("Original_descr", typeof(string));
    
            var original_net_costParameter = original_net_cost.HasValue ?
                new ObjectParameter("Original_net_cost", original_net_cost) :
                new ObjectParameter("Original_net_cost", typeof(decimal));
    
            var original_part_markupParameter = original_part_markup.HasValue ?
                new ObjectParameter("Original_part_markup", original_part_markup) :
                new ObjectParameter("Original_part_markup", typeof(int));
    
            var original_qtyParameter = original_qty != null ?
                new ObjectParameter("Original_qty", original_qty) :
                new ObjectParameter("Original_qty", typeof(string));
    
            var original_revisionParameter = original_revision != null ?
                new ObjectParameter("Original_revision", original_revision) :
                new ObjectParameter("Original_revision", typeof(string));
    
            var original_subParameter = original_sub != null ?
                new ObjectParameter("Original_sub", original_sub) :
                new ObjectParameter("Original_sub", typeof(string));
    
            var autoParameter = auto.HasValue ?
                new ObjectParameter("auto", auto) :
                new ObjectParameter("auto", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("daPartsUpdate", subParameter, sNParameter, lIParameter, qtyParameter, pNParameter, tPParameter, descrParameter, net_costParameter, costParameter, part_markupParameter, revisionParameter, original_autoParameter, original_LIParameter, original_PNParameter, original_SNParameter, original_TPParameter, original_costParameter, original_descrParameter, original_net_costParameter, original_part_markupParameter, original_qtyParameter, original_revisionParameter, original_subParameter, autoParameter);
        }
    
        public virtual int NewDeleteCommand(Nullable<int> original_auto, string original_LI, string original_PN, Nullable<int> original_SN, string original_TP, string original_cost, string original_descr, Nullable<decimal> original_net_cost, Nullable<int> original_part_markup, string original_qty, string original_revision, string original_sub)
        {
            var original_autoParameter = original_auto.HasValue ?
                new ObjectParameter("Original_auto", original_auto) :
                new ObjectParameter("Original_auto", typeof(int));
    
            var original_LIParameter = original_LI != null ?
                new ObjectParameter("Original_LI", original_LI) :
                new ObjectParameter("Original_LI", typeof(string));
    
            var original_PNParameter = original_PN != null ?
                new ObjectParameter("Original_PN", original_PN) :
                new ObjectParameter("Original_PN", typeof(string));
    
            var original_SNParameter = original_SN.HasValue ?
                new ObjectParameter("Original_SN", original_SN) :
                new ObjectParameter("Original_SN", typeof(int));
    
            var original_TPParameter = original_TP != null ?
                new ObjectParameter("Original_TP", original_TP) :
                new ObjectParameter("Original_TP", typeof(string));
    
            var original_costParameter = original_cost != null ?
                new ObjectParameter("Original_cost", original_cost) :
                new ObjectParameter("Original_cost", typeof(string));
    
            var original_descrParameter = original_descr != null ?
                new ObjectParameter("Original_descr", original_descr) :
                new ObjectParameter("Original_descr", typeof(string));
    
            var original_net_costParameter = original_net_cost.HasValue ?
                new ObjectParameter("Original_net_cost", original_net_cost) :
                new ObjectParameter("Original_net_cost", typeof(decimal));
    
            var original_part_markupParameter = original_part_markup.HasValue ?
                new ObjectParameter("Original_part_markup", original_part_markup) :
                new ObjectParameter("Original_part_markup", typeof(int));
    
            var original_qtyParameter = original_qty != null ?
                new ObjectParameter("Original_qty", original_qty) :
                new ObjectParameter("Original_qty", typeof(string));
    
            var original_revisionParameter = original_revision != null ?
                new ObjectParameter("Original_revision", original_revision) :
                new ObjectParameter("Original_revision", typeof(string));
    
            var original_subParameter = original_sub != null ?
                new ObjectParameter("Original_sub", original_sub) :
                new ObjectParameter("Original_sub", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewDeleteCommand", original_autoParameter, original_LIParameter, original_PNParameter, original_SNParameter, original_TPParameter, original_costParameter, original_descrParameter, original_net_costParameter, original_part_markupParameter, original_qtyParameter, original_revisionParameter, original_subParameter);
        }
    
        public virtual int NewInsertCommand(string sub, Nullable<int> sN, string lI, string qty, string pN, string tP, string descr, Nullable<decimal> net_cost, string cost, Nullable<int> part_markup, string revision)
        {
            var subParameter = sub != null ?
                new ObjectParameter("sub", sub) :
                new ObjectParameter("sub", typeof(string));
    
            var sNParameter = sN.HasValue ?
                new ObjectParameter("SN", sN) :
                new ObjectParameter("SN", typeof(int));
    
            var lIParameter = lI != null ?
                new ObjectParameter("LI", lI) :
                new ObjectParameter("LI", typeof(string));
    
            var qtyParameter = qty != null ?
                new ObjectParameter("qty", qty) :
                new ObjectParameter("qty", typeof(string));
    
            var pNParameter = pN != null ?
                new ObjectParameter("PN", pN) :
                new ObjectParameter("PN", typeof(string));
    
            var tPParameter = tP != null ?
                new ObjectParameter("TP", tP) :
                new ObjectParameter("TP", typeof(string));
    
            var descrParameter = descr != null ?
                new ObjectParameter("descr", descr) :
                new ObjectParameter("descr", typeof(string));
    
            var net_costParameter = net_cost.HasValue ?
                new ObjectParameter("net_cost", net_cost) :
                new ObjectParameter("net_cost", typeof(decimal));
    
            var costParameter = cost != null ?
                new ObjectParameter("cost", cost) :
                new ObjectParameter("cost", typeof(string));
    
            var part_markupParameter = part_markup.HasValue ?
                new ObjectParameter("part_markup", part_markup) :
                new ObjectParameter("part_markup", typeof(int));
    
            var revisionParameter = revision != null ?
                new ObjectParameter("revision", revision) :
                new ObjectParameter("revision", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewInsertCommand", subParameter, sNParameter, lIParameter, qtyParameter, pNParameter, tPParameter, descrParameter, net_costParameter, costParameter, part_markupParameter, revisionParameter);
        }
    
        public virtual int NewSelectCommand()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("NewSelectCommand");
        }
    }
}
